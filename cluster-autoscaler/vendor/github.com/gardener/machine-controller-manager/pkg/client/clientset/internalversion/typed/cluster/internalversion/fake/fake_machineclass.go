// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	cluster "github.com/gardener/machine-controller-manager/pkg/apis/cluster"
	v1 "k8s.io2/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io2/apimachinery/pkg/labels"
	schema "k8s.io2/apimachinery/pkg/runtime/schema"
	types "k8s.io2/apimachinery/pkg/types"
	watch "k8s.io2/apimachinery/pkg/watch"
	testing "k8s.io2/client-go/testing"
)

// FakeMachineClasses implements MachineClassInterface
type FakeMachineClasses struct {
	Fake *FakeCluster
	ns   string
}

var machineclassesResource = schema.GroupVersionResource{Group: "cluster.k8s.io", Version: "", Resource: "machineclasses"}

var machineclassesKind = schema.GroupVersionKind{Group: "cluster.k8s.io", Version: "", Kind: "MachineClass"}

// Get takes name of the machineClass, and returns the corresponding machineClass object, and an error if there is any.
func (c *FakeMachineClasses) Get(name string, options v1.GetOptions) (result *cluster.MachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(machineclassesResource, c.ns, name), &cluster.MachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cluster.MachineClass), err
}

// List takes label and field selectors, and returns the list of MachineClasses that match those selectors.
func (c *FakeMachineClasses) List(opts v1.ListOptions) (result *cluster.MachineClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(machineclassesResource, machineclassesKind, c.ns, opts), &cluster.MachineClassList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cluster.MachineClassList{}
	for _, item := range obj.(*cluster.MachineClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested machineClasses.
func (c *FakeMachineClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(machineclassesResource, c.ns, opts))

}

// Create takes the representation of a machineClass and creates it.  Returns the server's representation of the machineClass, and an error, if there is any.
func (c *FakeMachineClasses) Create(machineClass *cluster.MachineClass) (result *cluster.MachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(machineclassesResource, c.ns, machineClass), &cluster.MachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cluster.MachineClass), err
}

// Update takes the representation of a machineClass and updates it. Returns the server's representation of the machineClass, and an error, if there is any.
func (c *FakeMachineClasses) Update(machineClass *cluster.MachineClass) (result *cluster.MachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(machineclassesResource, c.ns, machineClass), &cluster.MachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cluster.MachineClass), err
}

// Delete takes name of the machineClass and deletes it. Returns an error if one occurs.
func (c *FakeMachineClasses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(machineclassesResource, c.ns, name), &cluster.MachineClass{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMachineClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(machineclassesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &cluster.MachineClassList{})
	return err
}

// Patch applies the patch and returns the patched machineClass.
func (c *FakeMachineClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *cluster.MachineClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(machineclassesResource, c.ns, name, data, subresources...), &cluster.MachineClass{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cluster.MachineClass), err
}
