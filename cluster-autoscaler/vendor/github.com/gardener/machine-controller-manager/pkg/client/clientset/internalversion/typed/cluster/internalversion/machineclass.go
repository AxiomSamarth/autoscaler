// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	cluster "github.com/gardener/machine-controller-manager/pkg/apis/cluster"
	scheme "github.com/gardener/machine-controller-manager/pkg/client/clientset/internalversion/scheme"
	v1 "k8s.io2/apimachinery/pkg/apis/meta/v1"
	types "k8s.io2/apimachinery/pkg/types"
	watch "k8s.io2/apimachinery/pkg/watch"
	rest "k8s.io2/client-go/rest"
)

// MachineClassesGetter has a method to return a MachineClassInterface.
// A group's client should implement this interface.
type MachineClassesGetter interface {
	MachineClasses(namespace string) MachineClassInterface
}

// MachineClassInterface has methods to work with MachineClass resources.
type MachineClassInterface interface {
	Create(*cluster.MachineClass) (*cluster.MachineClass, error)
	Update(*cluster.MachineClass) (*cluster.MachineClass, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*cluster.MachineClass, error)
	List(opts v1.ListOptions) (*cluster.MachineClassList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *cluster.MachineClass, err error)
	MachineClassExpansion
}

// machineClasses implements MachineClassInterface
type machineClasses struct {
	client rest.Interface
	ns     string
}

// newMachineClasses returns a MachineClasses
func newMachineClasses(c *ClusterClient, namespace string) *machineClasses {
	return &machineClasses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the machineClass, and returns the corresponding machineClass object, and an error if there is any.
func (c *machineClasses) Get(name string, options v1.GetOptions) (result *cluster.MachineClass, err error) {
	result = &cluster.MachineClass{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("machineclasses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MachineClasses that match those selectors.
func (c *machineClasses) List(opts v1.ListOptions) (result *cluster.MachineClassList, err error) {
	result = &cluster.MachineClassList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("machineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested machineClasses.
func (c *machineClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("machineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a machineClass and creates it.  Returns the server's representation of the machineClass, and an error, if there is any.
func (c *machineClasses) Create(machineClass *cluster.MachineClass) (result *cluster.MachineClass, err error) {
	result = &cluster.MachineClass{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("machineclasses").
		Body(machineClass).
		Do().
		Into(result)
	return
}

// Update takes the representation of a machineClass and updates it. Returns the server's representation of the machineClass, and an error, if there is any.
func (c *machineClasses) Update(machineClass *cluster.MachineClass) (result *cluster.MachineClass, err error) {
	result = &cluster.MachineClass{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("machineclasses").
		Name(machineClass.Name).
		Body(machineClass).
		Do().
		Into(result)
	return
}

// Delete takes name of the machineClass and deletes it. Returns an error if one occurs.
func (c *machineClasses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("machineclasses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *machineClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("machineclasses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched machineClass.
func (c *machineClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *cluster.MachineClass, err error) {
	result = &cluster.MachineClass{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("machineclasses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
